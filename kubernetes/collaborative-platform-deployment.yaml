apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"collaborative-platform:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"collaborative-platform\")].image"}]
  labels:
    app: collaborative-platform
    app.kubernetes.io/component: collaborative-platform
    app.kubernetes.io/instance: collaborative-platform
  name: collaborative-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: collaborative-platform
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        deployment: collaborative-platform
    spec:
      containers:
        - image: >-
            docker-registry.default.svc:5000/providedh/collaborative-platform
          imagePullPolicy: IfNotPresent
          name: collaborative-platform
          livenessProbe:
            exec:
              command:
                - uwping
                - '-expected_status'
                - '301'
                - 'uwsgi://localhost:8000/'
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - uwping
                - '-expected_status'
                - '301'
                - 'uwsgi://localhost:8000/'
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - containerPort: 8000
              protocol: TCP
            - containerPort: 8001
              protocol: TCP
          resources:
            limits:
              cpu: 4
              memory: 16Gi
            requests:
              cpu: 1
              memory: 4Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /app
              name: app
            - mountPath: /app/media
              name: media
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: app
          persistentVolumeClaim:
            claimName: app
        - name: media
          persistentVolumeClaim:
            claimName: media
# needs /secrets/secrets.py

[uwsgi]

# Django-related settings
# the base directory (full path)
chdir = /home/ubuntu/collaborative-platform/src/collaborative_platform
# Django's wsgi file
module = collaborative_platform.wsgi
# the virtualenv (full path)
# home = /path/to/virtualenv

max-requests = 500

# process-related settings
# master
master = true
# maximum number of worker processes
processes = 6
#threads = 4
#enable-threads = true
#thunder-lock = true
# the socket (use the full path to be safe
socket = /home/ubuntu/collaborative-platform/src/collaborative_platform/collaborative_platform.sock
# ... with appropriate permissions - may be needed
chmod-socket = 666

#enable stats
stats = /tmp/uwsgi_stats.sock
memory-report = true

# clear environment on exit
vacuum = true

logto = /home/ubuntu/collaborative-platform/logs/uwsgi.log
disable-logging = true
;max-worker-lifetime = 3600
log-4xx = true
log-5xx = true
die-on-term = true                     ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true
strict = true
single-interpreter = true
worker-reload-mercy = 120
harakiri = 120


;cheaper-algo = busyness
;processes = 32                      ; Maximum number of workers allowed
;cheaper = 2                          ; Minimum number of workers allowed
;cheaper-initial = 2                 ; Workers created at startup
;cheaper-overload = 1                 ; Length of a cycle in seconds
;cheaper-step = 1                    ; How many workers to spawn at a time

;cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
;cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
;cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
;cheaper-busyness-backlog-alert = 4  ; Spawn emergency workers if more than this many requests are waiting in the queue
;cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue
